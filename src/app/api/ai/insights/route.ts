import { NextRequest, NextResponse } from 'next/server'
import { analyticsService } from '@/lib/analytics/service'
import { claudeService } from '@/lib/ai/claude-service'
import { emailService } from '@/lib/email/service'

export async function POST(request: NextRequest) {
  try {
    const { 
      startDate, 
      endDate, 
      emailTo, 
      includeEmail = false,
      reportType = 'analytics'
    } = await request.json()

    if (!startDate || !endDate) {
      return NextResponse.json(
        { error: 'Missing required fields: startDate, endDate' },
        { status: 400 }
      )
    }

    // Generate analytics data
    console.log('Generating AI insights for analytics report...')
    const metrics = await analyticsService.getDataCaptureMetrics(
      new Date(startDate), 
      new Date(endDate)
    )

    // Generate AI insights
    console.log('Generating AI insights with Claude...')
    const aiResponse = await claudeService.generateInsights(metrics)

    // Generate email subject with AI
    const emailSubject = await claudeService.generateEmailSubject(metrics)

    const response = {
      success: true,
      insights: aiResponse.insights,
      rawResponse: aiResponse.rawResponse,
      generatedAt: aiResponse.generatedAt,
      emailSubject,
      metrics: {
        period: metrics.period,
        captureRate: metrics.companyMetrics.associateDataCaptureRate.toFixed(2),
        subscriptionRate: metrics.companyMetrics.associateDataSubscriptionRate.toFixed(2),
        totalGuests: metrics.companyMetrics.totalGuestCount,
        totalProfiles: metrics.companyMetrics.totalProfiles
      }
    }

    // Send email if requested
    if (includeEmail && emailTo) {
      console.log('Sending AI insights email...')
      
      const emailHtml = `
        <html>
          <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
              <h2 style="color: #8B4513;">Milea Estate Vineyard</h2>
              <h3 style="color: #666;">AI-Powered Analytics Insights</h3>
              
              <div style="background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #8B4513;">Executive Summary</h4>
                <p>${aiResponse.insights.executiveSummary}</p>
              </div>

              <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #2d5a2d;">Key Wins to Celebrate</h4>
                <ul>
                  ${aiResponse.insights.keyWins.map(win => `<li>${win}</li>`).join('')}
                </ul>
              </div>

              <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #856404;">Areas of Concern</h4>
                <ul>
                  ${aiResponse.insights.areasOfConcern.map(concern => `<li>${concern}</li>`).join('')}
                </ul>
              </div>

              <div style="background-color: #d1ecf1; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #0c5460;">Actionable Recommendations</h4>
                <ul>
                  ${aiResponse.insights.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                </ul>
              </div>

              <div style="background-color: #f8d7da; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #721c24;">Training Focus for Next Week</h4>
                <ul>
                  ${aiResponse.insights.trainingFocus.map(focus => `<li>${focus}</li>`).join('')}
                </ul>
              </div>

              <div style="background-color: #e2e3e5; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #383d41;">Current Metrics</h4>
                <p><strong>Period:</strong> ${metrics.period}</p>
                <p><strong>Capture Rate:</strong> ${metrics.companyMetrics.associateDataCaptureRate.toFixed(2)}%</p>
                <p><strong>Subscription Rate:</strong> ${metrics.companyMetrics.associateDataSubscriptionRate.toFixed(2)}%</p>
                <p><strong>Total Guests:</strong> ${metrics.companyMetrics.totalGuestCount}</p>
                <p><strong>Total Profiles:</strong> ${metrics.companyMetrics.totalProfiles}</p>
              </div>

              <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
              <p style="font-size: 12px; color: #888;">
                This AI analysis was generated by Claude AI and reviewed by the Milea Estate Vineyard Data Capture System.<br>
                Generated on: ${new Date().toLocaleString()}<br>
                Confidence Score: ${(aiResponse.insights.confidenceScore * 100).toFixed(0)}%
              </p>
            </div>
          </body>
        </html>
      `

      const emailText = `
        Milea Estate Vineyard - AI-Powered Analytics Insights
        
        Executive Summary:
        ${aiResponse.insights.executiveSummary}
        
        Key Wins to Celebrate:
        ${aiResponse.insights.keyWins.map(win => `- ${win}`).join('\n')}
        
        Areas of Concern:
        ${aiResponse.insights.areasOfConcern.map(concern => `- ${concern}`).join('\n')}
        
        Actionable Recommendations:
        ${aiResponse.insights.recommendations.map(rec => `- ${rec}`).join('\n')}
        
        Training Focus for Next Week:
        ${aiResponse.insights.trainingFocus.map(focus => `- ${focus}`).join('\n')}
        
        Current Metrics:
        - Period: ${metrics.period}
        - Capture Rate: ${metrics.companyMetrics.associateDataCaptureRate.toFixed(2)}%
        - Subscription Rate: ${metrics.companyMetrics.associateDataSubscriptionRate.toFixed(2)}%
        - Total Guests: ${metrics.companyMetrics.totalGuestCount}
        - Total Profiles: ${metrics.companyMetrics.totalProfiles}
        
        Generated on: ${new Date().toLocaleString()}
        Confidence Score: ${(aiResponse.insights.confidenceScore * 100).toFixed(0)}%
      `

      await emailService.sendEmail({
        to: Array.isArray(emailTo) ? emailTo : [emailTo],
        subject: emailSubject,
        html: emailHtml,
        text: emailText
      })

      response.emailSent = true
    }

    return NextResponse.json(response)

  } catch (error: any) {
    console.error('Failed to generate AI insights:', error)
    return NextResponse.json(
      { error: error.message || 'Failed to generate AI insights' },
      { status: 500 }
    )
  }
}
