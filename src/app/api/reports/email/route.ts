import { NextRequest, NextResponse } from 'next/server'
import { analyticsService } from '@/lib/analytics/service'
import { emailService } from '@/lib/email/service'
import { csvGenerator } from '@/lib/reports/csv-generator'
import { claudeService } from '@/lib/ai/claude-service'
import { generateReportHTML } from '@/lib/email/templates/report-template'

export async function POST(request: NextRequest) {
  try {
    const { 
      startDate, 
      endDate, 
      emailTo, 
      reportType = 'analytics',
      includeAssociates = true,
      includeSummary = true,
      includeAIInsights = false
    } = await request.json()

    if (!startDate || !endDate || !emailTo) {
      return NextResponse.json(
        { error: 'Missing required fields: startDate, endDate, emailTo' },
        { status: 400 }
      )
    }

    // Generate analytics data
    console.log('Generating analytics report for email...')
    const metrics = await analyticsService.getDataCaptureMetrics(
      new Date(startDate), 
      new Date(endDate)
    )

    // Generate CSV attachments
    const attachments: any[] = []
    
    if (includeSummary) {
      const summaryCSV = csvGenerator.generateSummaryCSV(metrics)
      attachments.push(csvGenerator.generateEmailAttachment(
        summaryCSV, 
        `${reportType}-summary-${new Date().toISOString().split('T')[0]}`
      ))
    }

    if (includeAssociates) {
      const associatesCSV = csvGenerator.generateDetailedAssociatesCSV(metrics)
      attachments.push(csvGenerator.generateEmailAttachment(
        associatesCSV, 
        `${reportType}-associates-${new Date().toISOString().split('T')[0]}`
      ))
    }

    // Generate AI insights if requested
    let aiInsights = null
    if (includeAIInsights) {
      try {
        console.log('Generating AI insights for email report...')
        const aiResponse = await claudeService.generateInsights(metrics)
        aiInsights = aiResponse.insights
      } catch (error) {
        console.warn('Failed to generate AI insights, proceeding without them:', error)
      }
    }

    // Generate email content using the new template
    const emailSubject = includeAIInsights && aiInsights ? 
      await claudeService.generateEmailSubject(metrics) :
      `Milea Estate Vineyard - ${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`
    
    const emailHtml = generateReportHTML(metrics, aiInsights || undefined, {
      includeAIInsights: !!aiInsights,
      includeTopPerformers: true,
      includeDetailedMetrics: false,
      customTitle: `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`
    })

    const emailText = `
      Milea Estate Vineyard - ${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report
      
      Report Summary:
      - Period: ${metrics.period}
      - Total Profiles: ${metrics.companyMetrics.totalProfiles}
      - Total Guest Count: ${metrics.companyMetrics.totalGuestCount}
      - Company Data Capture Rate: ${metrics.companyMetrics.companyDataCaptureRate.toFixed(2)}%
      - Company Subscription Rate: ${metrics.companyMetrics.companyDataSubscriptionRate.toFixed(2)}%
      - Wedding Lead Profiles: ${metrics.companyMetrics.profilesWithWeddingLeadTag}
      
      Top Performers:
      ${metrics.associates.slice(0, 3).map(associate => 
        `- ${associate.name}: ${associate.captureRate.toFixed(2)}% capture rate, ${associate.guestCount} guests`
      ).join('\n')}
      
      ${aiInsights ? `
      AI Insights:
      Executive Summary: ${aiInsights.executiveSummary}
      
      Key Wins:
      ${aiInsights.keyWins.map(win => `- ${win}`).join('\n')}
      
      Recommendations:
      ${aiInsights.recommendations.map(rec => `- ${rec}`).join('\n')}
      ` : ''}
      
      Detailed CSV reports are attached for further analysis.
      
      Generated on: ${new Date().toLocaleString()}
      This email was automatically generated by the Milea Estate Vineyard Data Capture System.
    `

    // Send email with attachments
    await emailService.sendEmail({
      to: Array.isArray(emailTo) ? emailTo : [emailTo],
      subject: emailSubject,
      html: emailHtml,
      text: emailText,
      attachments
    })

    return NextResponse.json({
      success: true,
      message: 'Report email sent successfully',
      attachments: attachments.map(a => a.filename),
      metrics: {
        period: metrics.period,
        totalProfiles: metrics.companyMetrics.totalProfiles,
        totalGuests: metrics.companyMetrics.totalGuestCount,
        captureRate: metrics.companyMetrics.companyDataCaptureRate.toFixed(2),
        subscriptionRate: metrics.companyMetrics.companyDataSubscriptionRate.toFixed(2)
      }
    })

  } catch (error: any) {
    console.error('Failed to send report email:', error)
    return NextResponse.json(
      { error: error.message || 'Failed to generate and send report email' },
      { status: 500 }
    )
  }
}