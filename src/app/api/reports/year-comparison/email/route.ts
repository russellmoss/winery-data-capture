import { NextRequest, NextResponse } from 'next/server'
import { analyticsService } from '@/lib/analytics/service'
import { emailService } from '@/lib/email/service'
import { csvGenerator } from '@/lib/reports/csv-generator'

export async function POST(request: NextRequest) {
  try {
    const { emailTo } = await request.json()

    if (!emailTo) {
      return NextResponse.json(
        { error: 'Missing required field: emailTo' },
        { status: 400 }
      )
    }

    // Generate year-over-year comparison data
    console.log('Generating year-over-year comparison report for email...')
    const yearComparison = await analyticsService.getYearOverYearComparison()

    // Generate CSV attachment
    const comparisonCSV = csvGenerator.generateYearComparisonCSV(yearComparison)
    const attachment = csvGenerator.generateEmailAttachment(
      comparisonCSV, 
      `year-comparison-${new Date().getFullYear()}`
    )

    // Generate email content
    const currentYear = new Date().getFullYear()
    const emailSubject = `Milea Estate Vineyard - Year-over-Year Comparison Report (${currentYear})`
    
    // Calculate summary statistics
    const avgCurrentYear = yearComparison.reduce((sum, month) => 
      sum + month.currentYear.companyMetrics.overallCaptureRate, 0) / yearComparison.length
    
    const avgPreviousYear = yearComparison.reduce((sum, month) => 
      sum + month.previousYear.companyMetrics.overallCaptureRate, 0) / yearComparison.length
    
    const overallChange = ((avgCurrentYear - avgPreviousYear) / avgPreviousYear * 100)

    const emailHtml = `
      <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <h2 style="color: #8B4513;">Milea Estate Vineyard</h2>
            <h3 style="color: #666;">Year-over-Year Comparison Report (${currentYear})</h3>
            
            <div style="background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h4 style="margin-top: 0; color: #8B4513;">Performance Summary</h4>
              <p><strong>Average ${currentYear} Capture Rate:</strong> ${avgCurrentYear.toFixed(2)}%</p>
              <p><strong>Average ${currentYear - 1} Capture Rate:</strong> ${avgPreviousYear.toFixed(2)}%</p>
              <p><strong>Overall Change:</strong> 
                <span style="color: ${overallChange >= 0 ? '#2d5a2d' : '#d32f2f'};">
                  ${overallChange >= 0 ? '+' : ''}${overallChange.toFixed(2)}%
                </span>
              </p>
            </div>

            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h4 style="margin-top: 0; color: #2d5a2d;">Monthly Performance</h4>
              <table style="width: 100%; border-collapse: collapse;">
                <tr style="background-color: #f0f0f0;">
                  <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">Month</th>
                  <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">${currentYear}</th>
                  <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">${currentYear - 1}</th>
                  <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">Change</th>
                </tr>
                ${yearComparison.map(month => `
                  <tr>
                    <td style="padding: 8px; border: 1px solid #ddd;">${month.month}</td>
                    <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${month.currentYear.companyMetrics.overallCaptureRate.toFixed(2)}%</td>
                    <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${month.previousYear.companyMetrics.overallCaptureRate.toFixed(2)}%</td>
                    <td style="padding: 8px; text-align: center; border: 1px solid #ddd; color: ${month.percentageChange >= 0 ? '#2d5a2d' : '#d32f2f'};">
                      ${month.percentageChange >= 0 ? '+' : ''}${month.percentageChange.toFixed(2)}%
                    </td>
                  </tr>
                `).join('')}
              </table>
            </div>

            <p>Detailed CSV report with all monthly data is attached to this email for further analysis.</p>
            
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <p style="font-size: 12px; color: #888;">
              This email was automatically generated by the Milea Estate Vineyard Data Capture System.<br>
              Generated on: ${new Date().toLocaleString()}
            </p>
          </div>
        </body>
      </html>
    `

    const emailText = `
      Milea Estate Vineyard - Year-over-Year Comparison Report (${currentYear})
      
      Performance Summary:
      - Average ${currentYear} Capture Rate: ${avgCurrentYear.toFixed(2)}%
      - Average ${currentYear - 1} Capture Rate: ${avgPreviousYear.toFixed(2)}%
      - Overall Change: ${overallChange >= 0 ? '+' : ''}${overallChange.toFixed(2)}%
      
      Monthly Performance:
      ${yearComparison.map(month => 
        `- ${month.month}: ${month.currentYear.companyMetrics.overallCaptureRate.toFixed(2)}% vs ${month.previousYear.companyMetrics.overallCaptureRate.toFixed(2)}% (${month.percentageChange >= 0 ? '+' : ''}${month.percentageChange.toFixed(2)}%)`
      ).join('\n')}
      
      Detailed CSV report is attached for further analysis.
      
      Generated on: ${new Date().toLocaleString()}
    `

    // Send email with attachment
    await emailService.sendEmail({
      to: Array.isArray(emailTo) ? emailTo : [emailTo],
      subject: emailSubject,
      html: emailHtml,
      text: emailText,
      attachments: [attachment]
    })

    return NextResponse.json({
      success: true,
      message: 'Year-over-year comparison report email sent successfully',
      attachment: attachment.filename,
      summary: {
        currentYear: currentYear,
        averageCurrentYear: avgCurrentYear.toFixed(2),
        averagePreviousYear: avgPreviousYear.toFixed(2),
        overallChange: overallChange.toFixed(2),
        monthsAnalyzed: yearComparison.length
      }
    })

  } catch (error: any) {
    console.error('Failed to send year-over-year comparison email:', error)
    return NextResponse.json(
      { error: error.message || 'Failed to generate and send year-over-year comparison email' },
      { status: 500 }
    )
  }
}
